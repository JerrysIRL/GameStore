@page "/editgame"
@page "/editgame/{id:int}"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager;
@inject GamesClient GamesClient;
@inject GenreClient GenreClient;

<PageTitle>@title</PageTitle>

@if (_genres is null || Game is null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="row mt-5">
        <h3>@title</h3>
        <div class="col-md-4">
            <EditForm Model="@Game" FormName="editGame" OnValidSubmit="HandleSubmitAsync" Enhance>
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Game.Name" class="form-control"> </InputText>
                    <ValidationMessage For=" () => Game.Name"/>
                </div>
                <div class="mb-3">
                    <label for="genre" class="form-label">Genre:</label>
                    <InputSelect id="genre" @bind-Value="Game.GenreId" class="form-select">
                        <option value="">Select a genre</option>
                        @foreach (var genre in _genres)
                        {
                            <option value="@genre.Id">@genre.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=" () => Game.GenreId"/>
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="Game.Price" class="form-control"> </InputNumber>
                    <ValidationMessage For=" () => Game.Price"/>
                </div>
                <div class="mb-3">
                    <label for="releaseDate" class="form-label">Name:</label>
                    <InputDate id="releaseDate" @bind-Value="Game.ReleaseDate" class="form-control"> </InputDate>
                </div>
                <button type="submit" class="btn btn-primary"> Submit </button>
                <a class="btn btn-secondary" href="/"> Cancel</a>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter] public int? Id { get; set; }

    private Genre[]? _genres;

    private string title = string.Empty;

    [SupplyParameterFromForm] private GameDetails? Game { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Game is not null)
        {
            return;
        }
        if (Id.HasValue)
        {
            Game = await GamesClient.GetGameAsync(Id.Value);
            title = $" Edit Game: {Game.Name}";
        }
        else
        {
            title = "New Game";
            Game = new()
            {
                Name = string.Empty,
                ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)
            };
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _genres = await GenreClient.GetGenresAsync();
    }

    private async Task HandleSubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(Game);

        if (Id is null)
            await GamesClient.AddGameAsync(Game);
        else
        {
            Game.Id = Id.Value;
            await GamesClient.UpdateGameAsync(Game);
        }

        NavigationManager.NavigateTo("/");
    }

}